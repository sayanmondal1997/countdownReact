{"ast":null,"code":"import { put, putResolve, call } from 'redux-saga/effects';\nimport { actionArr } from '../saga/watcher';\nimport { sagaMiddleware } from '../store';\nimport rootSaga from './../saga';\nimport store from './../store';\nimport { toast } from 'react-toastify';\nexport function GenerateSaga(actionType, apiService) {\n  if (!actionArr.filter(e => e.actionType === actionType).length) {\n    actionArr.push({\n      actionType: actionType,\n      sagaFunc: function* (payload) {\n        try {\n          const response = yield call(apiService, payload);\n          store.runSaga(rootSaga);\n          payload.callback && payload.callback(response);\n          store.dispatch({\n            type: actionType + '_SUCCESS',\n            response\n          });\n        } catch (error) {\n          console.log('sagaErr', error);\n          toast.error(error.response.data);\n          store.dispatch({\n            type: actionType + '_ERROR',\n            error: error.response\n          });\n        }\n      }\n    });\n    store.runSaga(rootSaga);\n  }\n}\n_c = GenerateSaga;\n\nvar _c;\n\n$RefreshReg$(_c, \"GenerateSaga\");","map":{"version":3,"sources":["/home/aponiar/Pictures/my-app/src/services/sagaGenerator.service.js"],"names":["put","putResolve","call","actionArr","sagaMiddleware","rootSaga","store","toast","GenerateSaga","actionType","apiService","filter","e","length","push","sagaFunc","payload","response","runSaga","callback","dispatch","type","error","console","log","data"],"mappings":"AAAA,SAASA,GAAT,EAAcC,UAAd,EAA0BC,IAA1B,QAAsC,oBAAtC;AACA,SAASC,SAAT,QAA0B,iBAA1B;AACA,SAASC,cAAT,QAA+B,UAA/B;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,KAAP,MAAkB,YAAlB;AACA,SAASC,KAAT,QAAsB,gBAAtB;AAIA,OAAO,SAASC,YAAT,CAAsBC,UAAtB,EAAkCC,UAAlC,EAA8C;AACjD,MAAI,CAACP,SAAS,CAACQ,MAAV,CAAiBC,CAAC,IAAIA,CAAC,CAACH,UAAF,KAAiBA,UAAvC,EAAmDI,MAAxD,EAAgE;AAC5DV,IAAAA,SAAS,CAACW,IAAV,CAAe;AACXL,MAAAA,UAAU,EAAEA,UADD;AAEXM,MAAAA,QAAQ,EAAE,WAAWC,OAAX,EAAoB;AAClB,YAAI;AACA,gBAAMC,QAAQ,GAAG,MAAMf,IAAI,CAACQ,UAAD,EAAaM,OAAb,CAA3B;AACAV,UAAAA,KAAK,CAACY,OAAN,CAAcb,QAAd;AACAW,UAAAA,OAAO,CAACG,QAAR,IAAoBH,OAAO,CAACG,QAAR,CAAiBF,QAAjB,CAApB;AACAX,UAAAA,KAAK,CAACc,QAAN,CAAe;AAAEC,YAAAA,IAAI,EAAGZ,UAAU,GAAG,UAAtB;AAAmCQ,YAAAA;AAAnC,WAAf;AACH,SALD,CAKE,OAAMK,KAAN,EAAa;AACXC,UAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBF,KAAvB;AACAf,UAAAA,KAAK,CAACe,KAAN,CAAYA,KAAK,CAACL,QAAN,CAAeQ,IAA3B;AACAnB,UAAAA,KAAK,CAACc,QAAN,CAAe;AAAEC,YAAAA,IAAI,EAAGZ,UAAU,GAAG,QAAtB;AAAiCa,YAAAA,KAAK,EAAEA,KAAK,CAACL;AAA9C,WAAf;AACH;AACJ;AAbE,KAAf;AAeAX,IAAAA,KAAK,CAACY,OAAN,CAAcb,QAAd;AACH;AACJ;KAnBeG,Y","sourcesContent":["import { put, putResolve, call } from 'redux-saga/effects';\nimport { actionArr } from '../saga/watcher'\nimport { sagaMiddleware } from '../store';\nimport rootSaga from './../saga';\nimport store from './../store';\nimport { toast } from 'react-toastify';\n\n\n\nexport function GenerateSaga(actionType, apiService) {\n    if (!actionArr.filter(e => e.actionType === actionType).length) {\n        actionArr.push({\n            actionType: actionType, \n            sagaFunc: function* (payload) {\n                        try {\n                            const response = yield call(apiService, payload);\n                            store.runSaga(rootSaga);\n                            payload.callback && payload.callback(response);\n                            store.dispatch({ type: (actionType + '_SUCCESS'), response})\n                        } catch(error) {\n                            console.log('sagaErr', error)\n                            toast.error(error.response.data)\n                            store.dispatch({ type: (actionType + '_ERROR'), error: error.response  })\n                        }\n                    }\n        })\n        store.runSaga(rootSaga);\n    }\n}"]},"metadata":{},"sourceType":"module"}